/*flex.css v1.02*/

$browser-context: 16;

@function em($pixels, $context: $browser-context) {
  @return ($pixels / $context) * 1em;
}

@mixin box-sizing($box-model) {
	-webkit-box-sizing: $box-model;
	-moz-box-sizing: $box-model;
	box-sizing: $box-model;
}

$grids: (5, 24);

$breakpoints: (
	sm: 568,
	md: 768,
	lg: 992,
	xl: 1200
);

//Utility variables
$listOfKeys: map-keys($breakpoints);
$lastKey: nth($listOfKeys, length($listOfKeys));

html {
  line-height: 1.15;
  -ms-text-size-adjust: 100%;
  -webkit-text-size-adjust: 100%;
}

body {
  margin: 0;
}

article,
aside,
footer,
header,
nav,
section {
  display: block;
}

h1 {
  font-size: 2em;
  margin: 0.67em 0;
}

figcaption,
figure,
main {
  display: block;
}

figure {
  margin: 1em 40px;
}

hr {
  box-sizing: content-box;
  height: 0;
  overflow: visible;
}

pre {
  font-family: monospace, monospace;
  font-size: 1em;
}

a {
  background-color: transparent;
  -webkit-text-decoration-skip: objects;
}

abbr[title] {
  border-bottom: none;
  text-decoration: underline;
  text-decoration: underline dotted;
}

b,
strong {
  font-weight: inherit;
}

b,
strong {
  font-weight: bolder;
}

code,
kbd,
samp {
  font-family: monospace, monospace;
  font-size: 1em;
}

dfn {
  font-style: italic;
}

mark {
  background-color: #ff0;
  color: #000;
}

small {
  font-size: 80%;
}

sub,
sup {
  font-size: 75%;
  line-height: 0;
  position: relative;
  vertical-align: baseline;
}

sub {
  bottom: -0.25em;
}

sup {
  top: -0.5em;
}

audio,
video {
  display: inline-block;
}

audio:not([controls]) {
  display: none;
  height: 0;
}

img {
  border-style: none;
}

svg:not(:root) {
  overflow: hidden;
}

button,
input,
optgroup,
select,
textarea {
  font-family: sans-serif;
  font-size: 100%;
  line-height: 1.15;
  margin: 0;
}

button,
input {
  overflow: visible;
}

button,
select {
  text-transform: none;
}

button,
html [type="button"],
[type="reset"],
[type="submit"] {
  -webkit-appearance: button;
}

button::-moz-focus-inner,
[type="button"]::-moz-focus-inner,
[type="reset"]::-moz-focus-inner,
[type="submit"]::-moz-focus-inner {
  border-style: none;
  padding: 0;
}

button:-moz-focusring,
[type="button"]:-moz-focusring,
[type="reset"]:-moz-focusring,
[type="submit"]:-moz-focusring {
  outline: 1px dotted ButtonText;
}

fieldset {
  padding: 0.35em 0.75em 0.625em;
}

legend {
  box-sizing: border-box;
  color: inherit;
  display: table;
  max-width: 100%;
  padding: 0;
  white-space: normal;
}

progress {
  display: inline-block;
  vertical-align: baseline;
}

textarea {
  overflow: auto;
}

[type="checkbox"],
[type="radio"] {
  box-sizing: border-box;
  padding: 0;
}

[type="number"]::-webkit-inner-spin-button,
[type="number"]::-webkit-outer-spin-button {
  height: auto;
}

[type="search"] {
  -webkit-appearance: textfield;
  outline-offset: -2px;
}

[type="search"]::-webkit-search-cancel-button,
[type="search"]::-webkit-search-decoration {
  -webkit-appearance: none;
}

::-webkit-file-upload-button {
  -webkit-appearance: button;
  font: inherit;
}

details,
menu {
  display: block;
}

summary {
  display: list-item;
}

canvas {
  display: inline-block;
}

template {
  display: none;
}

[hidden] {
  display: none;
}

//Everything

%all-flex-grid-groups{
	display: -webkit-flex;
	display: -ms-flexbox;
	display: flexbox;
	-webkit-flex-flow: row wrap;
	-ms-flex-flow: row wrap;
	flex-flow: row wrap;
	word-wrap: break-word;
	@include box-sizing(border-box);
}

@each $gridSize in $grids {
	.flex-#{$gridSize}g{
		@extend %all-flex-grid-groups;
		@for $i from 1 through $gridSize {
		  &>.flex-#{$i} { width: (100%/$gridSize)*$i; }
		}
		@for $i from 1 through ($gridSize - 1) {
		  &>.flex-off-#{$i} { margin-left: (100%/$gridSize)*$i; }
		}
	}
}

%all-flex-cols {
	display:inline-block;
	@include box-sizing(border-box);
	vertical-align:top;
}

//Apply to last/biggest grid element
@for $i from 1 through nth($grids, length($grids)) {
	.flex-#{$i} { @extend %all-flex-cols;}
}

svg.responsive, img.responsive{
	max-width:100%;
}

video {
  width: 100%	!important;
  height: auto	!important;
}

.flex-vid{
	padding-bottom: 56.25%;
}

.flex-vid-4x3{
	padding-bottom: 75%;
}

.flex-vid, .flex-vid-4x3 {
	position: relative;
	height: 0;

	object, embed, iframe{
		position: absolute;
		top: 0;
		left: 0;
		width: 100%;
		height: 100%;
	}
}

.hidden{
	display: none !important;
}

@media (max-width: ( em(map-get($breakpoints, nth($listOfKeys, length($listOfKeys))) - 1) )) {
	.hidden-xs{
		display: none !important;
	}
}

@each $key, $size in $breakpoints {
		//Apply to all keys apart from last
		@if $key != $lastKey {
			$nextKey: nth($listOfKeys, index($listOfKeys, $key) + 1);
			@media (min-width: em($size)) and (max-width: (em(map-get($breakpoints, $nextKey) - 1))){
				.hidden-#{$key}{
					display: none !important;
				}
			}
		}
}

//Loop through all breakpoints
@each $key, $size in $breakpoints {
	//Set media query size for this breakpoint
	@media (min-width: em($size)) {
		@each $gridSize in $grids {
			.flex-#{$gridSize}g{
				@for $i from 1 through $gridSize {
				  &>.flex-#{$key}-#{$i} { width: (100%/$gridSize)*$i; }
				}
				@for $i from 1 through ($gridSize - 1) {
				  &>.flex-#{$key}-off-#{$i} { margin-left: (100%/$gridSize)*$i; }
				}
			}
		}
		//Set display hidden in here if last breakpoint
		@if $key == $lastKey {
			.hidden-#{$key}{
				display: none !important;
			}
		}
	}
}
